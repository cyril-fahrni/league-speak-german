################## Credits ######################
####Main Builder Miles JuddPorter###
##https://github.com/MilesJuddPorter/leagueSpeak
##https://www.reddit.com/r/leagueoflegends/comments/ri0yep/speech_to_text_in_league_of_legends_using_python/

####Edited for the German Guys <3 by 4Liryc
####Bei Fragen Discord: 4Liryc#3210

####Install guide####
#cmd start einfügen ohne (#)
#pip install SpeechRecognition
#pip install numpy
#pip install sounddevice
#pip install wave
#pip install keyboard
#pip install pyautoguigg

################################ WICHTIG ########################################
Das skript ist momentan nur für SoloQ optimiert! Also ohne DC/TS im hintergrund!!!
#################################################################################



#pip install deepl

#Microsoft store öffnen python eingeben (ich habe 3.10 benutzt installieren)
#https://www.deepl.com/de/pro-api/ DeepL API Free oder pro registrieren -> Runterscrollen bis "So funktioniert's DeePL API Free/Pro" auswählen und nur den teil nach auth_key= kopieren!! z.B 8d**************

####Import Modules####
import speech_recognition as sr
import numpy as np
import sounddevice as sd
import wave

import keyboard
import pyautogui
import deepl 

from time import sleep



FILE_NAME = './test.wav'  #File name to save
wave_length = 4  #Recording length (seconds)
sample_rate = 16_000  #Sampling frequency
while True:
    keyboard.wait('n')
    print("RECORDING ***")
    #Start recording (wave_length Record for seconds. Wait until the recording is finished with wait)
    data = sd.rec(int(wave_length * sample_rate), sample_rate, channels=1)
    sd.wait()
   
    #Normalize. Since it is recorded with 16 bits of quantization bit, it is maximized in the range of int16.
    data = data / data.max() * np.iinfo(np.int16).max
   
    # float -> int
    data = data.astype(np.int16)
   
    #Save file
    with wave.open(FILE_NAME, mode='wb') as wb:
        wb.setnchannels(1)  #monaural
        wb.setsampwidth(2)  # 16bit=2byte
        wb.setframerate(sample_rate)
        wb.writeframes(data.tobytes())  #Convert to byte string
       

   
    filename = "test.wav"
    r = sr.Recognizer()
 
    with sr.AudioFile(filename) as source:
        # listen for the data (load audio to memory)
        audio_data = r.record(source)
        # recognize (convert from speech to text)
        text = r.recognize_google(audio_data, language="de-DE")
        translator = deepl.Translator("####Your Key####") 
        result = translator.translate_text(text, target_lang="en-US") 
        translated_text = result.text
        print(translated_text)

    keyboard.press_and_release('enter')
    sleep(0.01)
    pyautogui.FAILSAFE = False
    pyautogui.write(translated_text)
    keyboard.press_and_release('enter')
